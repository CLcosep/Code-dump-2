
part 4 Js fundamentals

Arrays 
-- ordered collection of items (string, numbers, etc.)
------------------------------------------------------------------
- Creating an Array -

example syntax:
const cars = ["BMW", "Volvo", "Porsche"];

const array_name = [item1 , item2, ...];

note:
spaces and line breaks are not important

valid: 
const cars = [
    "BMW",
    "Volvo",
    "Porsche"
];

valid: 
const cars = [];
cars[0] = "BWM";
cars[1] = "Volvo";
cars[2] = "Porsche";
---------------------------------------------------------------
- Using the new keyword in Js -

--array declaration--
const cars = new Array("Saab", "Volvo", "BMW");
--example of display--
document.getElementById("demo").innerHTML = cars

the two examples above works the same, no need to use new Array()

for simplicity, readability and execution speed, use the array literal method.
-->  const array_name = [item1, item2, ...]; <-- this is array literal method

note:
array literals create array objects
------------------------------------------------------------------
- Accessing Array Elements -

you can acess array elements by refering to the index number 

const cars = ["Saab" , "Volvo", "BMW"];
let car = cars[0];
console.log(`${car}`);

- Changing an Array Element - 

const cars = ["Saab" , "Volvo", "BMW"];
cars[0] = "butt";
console.log(`${cars[0]}`);
------------------------------------------------------------------
- Converting an Array to a String - 

toString() method converts an array to a string array

const fruits = ["pineapple", "banana", "apple"];
document.getElementById("demo").innerHTML = fruits.toString();
------------------------------------------------------------------
- Access the full Array - 

can be accessed by referrign to the array name

const fruits = ["pineapple", "banana", "apple"];
document.getElementById("demo").innerHTML = fruits

------------------------------------------------------------------
- Arrays are objects -

arrays are special type of objects. The typeof operator in Js returns "object"
for arrays. But Js arrays are best described as arrays

arrays use numbers to access its "elements". In this example, person[0] returns "john"

const person = ["john", "Doe", 46];

Objects use names to access its "memebers". person.firstName returns John:

const person = {firstName: "John", lastName: "Doe", age: 46};
------------------------------------------------------------------
- Array elements can be objects - 

Js variables can be objects. Arrays are special kinds of objects.
Because of this, you can have variables of different types in the same Array.
You can have objects in an Array.
 You can have functions in an Array. 
 You can have arrays in an array

myArray[0] = Date.now;
myArray[1] = myFunction;
my Array[2] = myCars

------------------------------------------------------------------
- Array Properties and Methods - 

Js arrays have built-in array properties and methods:

cars.length // returns the number of elements
cars.sort() // Sorts the array

- The length property - 
The lenght property returns the length of an array (number of elements)

example:
const cars = ["papaya", "banana", "yes"];
let length = cars.length; // stores the value of 3 as there are 3 elements in the cars array

note:
The length property is always one more than the highest array index
------------------------------------------------------------------
- Accessing the last array element - 
const fruits = ["apples", "bananan", "mango"];
let fruit = fruits[fruits.length - 1];
------------------------------------------------------------------

- Looping Array Elements - 
const fruits = ["bananan", "apple", "pear"];

let fLen = fruits.length;

let text  = "<ul>";
for(let i = 0; i < fLen; i++){
    text += "<li>" + fruits[i] + "</li>";
}
text += "</ul>";
document.getElementById("demo").innerHTML = text;

- you can also use the Array.forEach() function: -
const fruits = ["bananan", "apple", "pear"];

let text = "<ul>";
fruits.forEach(myFunction);
text += "</ul>";

function myFunction(value){
    text += "<li>" + value + "</li>";
}
document.getElementById("demo").innerHTML = text;
------------------------------------------------------------------

- Adding Array Elements -

the easiest way to add a new element to an array is using the push() method:

const fruits = ["bannana", "apple", "oear"];
fruits.push("Lemon"); // adds a new element 

new element can also be added to an array using the length property::

const fruits = ["bannana", "pearl", "apples"];
fruits[fruits.length] = "lemon" //Adds "Lemon" to fruits

Warning:
Adding elements with high indexes can create undefined "holes" in an array:

example:
const fruits = ["bannana", "pearl", "apples"];
fruits[6] = "Lemon"; // creates an undefined holes in fruits
-------------------------------------------------------------------------------

- Associative Arrays - 
Many programming languages support arrays with named indexes.
Arrays with named indexes are called associative arrays (or hashes)
JS does not support arrays with named indexes
in Js, arrays always use numbered indexes

example:
const person = [];
peron[0] = "jpjn";
person[1] = "doe";
person[2] = 46;
perons.length; // will retur 3
person[0]; //return "jpjn"

Warning:
if you used named indexes, Js will redefine the array to an object
After that, some array methods and properties will produce incorect results

example:
const person = [];
peron["firstname"] = "jpjn";
person["LastName"] = "doe";
person["age"] = 46;
perons.length; // will retur 0
person[0]; //return undefined
----------------------------------------------------------------------------------

- Difference between Arrays and Objects - 
Js arrays use numbered indexes
Js objects use named indexes

When to Use arrays. When to use Obects.
- Js does not support associative arrays
-You should use objects when you want the element names to be strings (text)
- You should use arrays when you want the element names to be numbers
--------------------------------------------------------------------------------------

- JS new Array() -

const points = new Array();
const points = [];
Both create a new empty array

const points = new Array(40,21,10,1);
const points = [40, 21,10,1];
both create a new array containing 6 numbers

common error
const points = [40]; <-- create an array with one element
is not the same as
const points = new Array(40); <-- create an array with 40 undefined elements 
--------------------------------------------------------------------------------------

- How to Recognize an Array - 

solutions:
Array.isArray():
const fruits = ["Banna", "oragnge", "apple"];
document.getElementById("demo").innerHTML = Array.isArray(fruits);

solution2:
instanceof operator

const fruits = ["Banna", "oragnge", "apple"];
document.getElementById("demo").innerHTML = fruits instanceof Array;

  
  
JavaScript Array Methods

    ------------------------------------------

    - JavaScript Array length - 

    The length property returns the length(size) of an array:

    const fruits = ["appls", "bnanna", "ass"];
    let size = fruits.length;

    ---------------------------------------------------

    - JavaScript Array toString() - 

    The method toString() converts an array to a string of (comma separated) array values

    const fruits = ["aoasd", "asdw", "wwwwwww"];
    document.getElementById("demo").innerHTML = fruits.toString();

    ---------------------------------------------------

    - Join method - 

    The join() method also joins all array elements into a string
    behaves just like toString(), but in addition you can specify the separator:

    const fruits = ["banna", "aooke", "ikasd", "asda"];
    document.getElementById("demo").innerHTML = fruits.join(" * ");
    results: Banana * Orange * Apple * Mango

    -----------------------------------------------------

    - Popping and Pushing - 

    when you work with arrays, it is easy to remove elements and add new elements.
    This is what popping and pushing is:
    Popping items out of an array, or pushing items into an array

    -------------------------------------------------------

    - JavaScript Array pop() - 

    The pop() method removes the last element from an array:

    const fruits = ["bababa", "asdads", "asdawd"];
    fruits.pop();

    The pop() method returns the value that was "popped out":

    const fruits = ["basda", "awda", "awdaw"];
    let fruit = fruits.pop();

    --------------------------------------------------------

    - JavaScript Array push() - 

    The push() method adds a new element to an array (at the end):

    const fruits = ["asda", "asdaw", "dasda"];
    fruits.push("apple");

    The push() method returnd the new array length :
    
    const fruits = ["Bnanana", "Organge", "Aplle", "mange"];
    let length = fruits.push("Kiwi");

    -------------------------------------------------------------

    - Shifting Elements -

    Shifting is equivalent to popping, but working on the first element instead of the last

    ----------------------------------------------------------------

    - JavaScript Array shift() - 

    The shift() method removes the first array element and "shifts" all other elements to 
    a lower index

    const fruits = ["baannna", "orag", "apl", "mnasd"];
    document.getElementById("demo1").innerHTML = fruits;
    fruits.shift();
    document.getElementById("demo2").innerHTML = fruits;
    results: orag,apl,mnasd

    The shift() method returns the value that was "shifted out":

    const fruits = ["baannna", "orag", "apl", "mnasd"];
    document.getElementById("demo1").innerHTML = fruits.shift();
    document.getElementById("demo2").innerHTML = fruits;

    -----------------------------------------------------------------

    - JavaScript Array unshift() - 

    The unshift() method adds a new elemenmt to an array (at the beginning), and "unshifts"
    older elements:

    const fruits = ["baanna", "orange", "Apple", "Mango"];
    document.getElementById("demo1").innerHTML = fruits;
    fruits.unshift("Lemon");
    document.getElementById("demo2").innerHTML = fruits;

    The unshift() method returns the new array length

    const fruits = ["baanna", "orange", "Apple", "Mango"];
    document.getElementById("demo1").innerHTML = fruits.unshift("Lemon");
    document.getElementById("demo2").innerHTML = fruits;

    -----------------------------------------------------------------

    - Changing Elements - 

    Array elements are accessed using their index number:

    array indexes starts with 0:

    const fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo1").innerHTML = fruits;
    fruits[0] = "Kiwi";
    document.getElementById("demo2").innerHTML = fruits;

    -----------------------------------------------------------------

    - JavaScript Array Length - 

    The length property provides an easy way to append a new element to an array:

    const fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo1").innerHTML = fruits;
    fruits[fruits.length] = "Kiwi";
    document.getElementById("demo2").innerHTML = fruits;

    -----------------------------------------------------------------

    - JavaScript Array delete() - 

    Warning: 
    Array elements can be deleted using the JavaScript operator delete.
    Using delete leaves undefined holes in the array.
    Use pop() or shift() instead.

    example:
    const fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo1").innerHTML =
    "The first fruit is: " + fruits[0];
    delete fruits[0];
    document.getElementById("demo2").innerHTML =
    "The first fruit is: " + fruits[0];

    -----------------------------------------------------------------

    - Merging (Concatenating) Arrays - 

    The concat() method creates a new array by merging (concatenating) existing arrays:

    const myGirls = ["ceclie", "lone"];
    const myBoys = ["emil", "tonoas", "linus"];

    const myChildren = myGirls.concat(myBoys);

    The concat() method does not change the existing arrays. It always returns a new array

    The concat() method can take any number of array arguments:

    const arr1 = ["Cecilie", "Lone"];
    const arr2 = ["Emil", "Tobias", "Linus"];
    const arr3 = ["Robin", "Morgan"];
    const myChildren = arr1.concat(arr2, arr3);

    The concat() method can also take strings as arguments:

    const arr1 = ["Emil", "Tobias", "Linus"];
    const myChildren = arr1.concat("Peter"); 

    -----------------------------------------------------------------

    - Flattening an Array - 

    Flattening an array is the process of reducing the dimensionality of an array.
    The flat() method creates a new array with sub-array elements concatenated to a 
    specified depth

    const myArr = [[1,2],[3,4],[5,6]];

    const newArr = myArr.flat();
    document.getElementById("demo").innerHTML = newArr;
    Result: 1,2,3,4,5,6

    -----------------------------------------------------------------

    - Splicing and Slicing Arrays - 

    The splice() method adds new items to an array
    The slice() method slices out a piece of an array

    -----------------------------------------------------------------

    - JavaScript Array splice() - 

    const fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo1").innerHTML = fruits;

    fruits.splice(2, 0, "Lemon", "Kiwi");
    document.getElementById("demo2").innerHTML = fruits;

    The first parameter (2) defines the position where new elements should be added (spliced in)
    The second parameter ("Lemon", "Kiwi") define the new elements to be added.
    
    The splice() method returns an array with the deleted items:
    const fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo1").innerHTML = "Original Array:<br> " + fruits;
    let removed = fruits.splice(2, 2, "Lemon", "Kiwi"); 
    document.getElementById("demo2").innerHTML = "New Array:<br>" + fruits;
    document.getElementById("demo3").innerHTML = "Removed Items:<br> " + removed;
    
    -----------------------------------------------------------------

    - Using splice() to Remove Elements -

    With clever parameter setting, you can use splice() to remove elements without leaving
    "holes" in the array:

    const fruits = ["Banana", "Orange", "Apple", "Mango"];
    fruits.splice(0, 1);

    The first parameter (0) defines the position where new elements should be added (spliced in)
    The second parameter (1) defines how many elements shouldbe removed.
    The rest of the parameters are omitted. No new elements will be added.

    -----------------------------------------------------------------

    - JavaScript Array slice() - 

    The slice() method slices out a piece of an array into a new array.
    This example slices out a part of an array starting from array element 1:

    const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
    const citrus = fruits.slice(1);

    Note:
    slice() method creates a new array.
    The slice() method does not remove any elements from the source array

    This example slices out a part of an array starting from array element 3:

    const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
    const citrus = fruits.slice(3);

    The slice() method can take two arguments like slice(1,3)
    The method then selects elements from the start argument, and up to (but not including)
    the end argument.

    const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
    const citrus = fruits.slice(1, 3);

    If the end argument is omitted, like in the first examples, the slice() method slices out
    the rest of the array

    const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
    const citrus = fruits.slice(2);

    -----------------------------------------------------------------

    - Automatic toString() - 

    JavaScript automatically converts an array to a comma separated string when a primitive 
    value is expected.
    This is always the case when you try to output an array.

    Note: all javascript objects have a toString() method.